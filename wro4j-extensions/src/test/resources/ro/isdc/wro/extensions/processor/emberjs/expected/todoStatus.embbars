(function() {Ember.TEMPLATES['todoStatus'] = Ember.Handlebars.template(
function anonymous(Handlebars, depth0, helpers, partials, data) {
    helpers = helpers || Ember.Handlebars.helpers;
    var buffer = "", stack1, stack2, stack3, stack4, tmp1, self = this, functionType = "function", helperMissing = helpers.helperMissing, undef = void 0, escapeExpression = this.escapeExpression;
    function program1(depth0, data) {
        data.buffer.push("s");
    }
    data.buffer.push("<div class=\"row-fluid span5\">\n  <strong>");
    stack1 = depth0;
    stack2 = "remaining";
    stack3 = {};
    stack4 = "true";
    stack3["escaped"] = stack4;
    stack4 = helpers._triageMustache || depth0._triageMustache;
    tmp1 = {};
    tmp1.hash = stack3;
    tmp1.contexts = [];
    tmp1.contexts.push(stack1);
    tmp1.data = data;
    if (typeof stack4 === functionType) {
        stack1 = stack4.call(depth0, stack2, tmp1);
    } else {
        if (stack4 === undef) {
            stack1 = helperMissing.call(depth0, "_triageMustache", stack2, tmp1);
        } else {
            stack1 = stack4;
        }
    }
    data.buffer.push(escapeExpression(stack1) + "</strong> items left.\n  <button id=\"remove-finished\" class=\"btn btn-inverse\">\n    <i class=\"icon-ban-circle icon-white\"></i> Clear <strong>");
    stack1 = depth0;
    stack2 = "finished";
    stack3 = {};
    stack4 = "true";
    stack3["escaped"] = stack4;
    stack4 = helpers._triageMustache || depth0._triageMustache;
    tmp1 = {};
    tmp1.hash = stack3;
    tmp1.contexts = [];
    tmp1.contexts.push(stack1);
    tmp1.data = data;
    if (typeof stack4 === functionType) {
        stack1 = stack4.call(depth0, stack2, tmp1);
    } else {
        if (stack4 === undef) {
            stack1 = helperMissing.call(depth0, "_triageMustache", stack2, tmp1);
        } else {
            stack1 = stack4;
        }
    }
    data.buffer.push(escapeExpression(stack1) + "</strong> completed item");
    stack1 = depth0;
    stack2 = "oneFinished";
    stack3 = helpers.unless;
    tmp1 = self.program(1, program1, data);
    tmp1.hash = {};
    tmp1.contexts = [];
    tmp1.contexts.push(stack1);
    tmp1.fn = tmp1;
    tmp1.inverse = self.noop;
    tmp1.data = data;
    stack1 = stack3.call(depth0, stack2, tmp1);
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n  </button>\n</div>");
    return buffer;
}
)})();